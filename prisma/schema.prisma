// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core authentication and account information
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  onboardingCompleted Boolean @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  customFields      Json?     @default("{}")
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  documents         Document[]
  userData          UserData[]
  aiPersona         AiPersona?
  extensionTokens   ExtensionToken[]
  formSubmissions   FormSubmission[]
  auditLogs         AuditLog[]
  formFillLogs      FormFillLog[]
  formTemplates     FormTemplate[]
}

// NextAuth models
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Detailed user information organized by category
model UserProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  firstName      String?
  lastName       String?
  middleName     String?
  dateOfBirth    DateTime?
  gender         String?
  
  // Contact Information
  phoneNumber    String?
  alternateEmail String?
  
  // Address Information
  addressLine1   String?
  addressLine2   String?
  city           String?
  state          String?
  postalCode     String?
  country        String?
  
  // Professional Information
  occupation     String?
  company        String?
  jobTitle       String?
  
  // Additional Information
  bio            String?  @db.Text
  website        String?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Form-specific data storage
model UserData {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  key         String
  value       String   @db.Text
  category    String   // e.g., personal, professional, contact, payment, etc.
  isEncrypted Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, key, category])
}

// Document storage and extracted information
model UserDocument {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  filename       String
  originalName   String
  mimeType       String
  size           Int
  path           String
  extractedData  Json?
  processingStatus DocumentStatus @default(PENDING)
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Trained AI model data and status tracking
model AiPersona {
  id            String        @id @default(cuid())
  userId        String        @unique
  status        PersonaStatus @default(PENDING)
  metadata      Json?
  error         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_personas")
}

// Secure browser extension authentication
model ExtensionToken {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token         String   @unique
  deviceName    String?
  deviceType    String?
  lastUsed      DateTime?
  expiresAt     DateTime
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Stored form structures and field mappings
model FormTemplate {
  id            String           @id @default(cuid())
  domainPattern String
  name          String
  description   String?
  structure     Json
  fieldMappings Json?
  submissions   FormSubmission[]
  
  // Track which user created this template
  createdById   String?
  createdBy     User?            @relation(fields: [createdById], references: [id])
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@unique([domainPattern, name])
}

// Record of completed form submissions
model FormSubmission {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  formTemplateId  String?
  formTemplate    FormTemplate? @relation(fields: [formTemplateId], references: [id])
  
  url             String
  domain          String
  formData        Json
  status          String    @default("COMPLETED")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Log of form field suggestions and autofill
model FormFillLog {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  url             String
  domain          String
  fieldsCount     Int
  suggestionsCount Int
  metadata        Json?
  
  createdAt       DateTime  @default(now())
}

// Vector representations for semantic matching
model FieldEmbedding {
  id            String   @id @default(cuid())
  fieldName     String
  fieldLabel    String
  fieldType     String
  embedding     String   @db.Text  // Stored as Base64 encoded vector
  metadata      Json?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([fieldName, fieldLabel, fieldType])
}

// Security and activity tracking
model AuditLog {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  
  action      String
  resource    String
  resourceId  String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime    @default(now())
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PersonaStatus {
  PENDING
  PROCESSING
  TRAINED
  FAILED
}
